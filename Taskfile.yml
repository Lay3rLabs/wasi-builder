# https://taskfile.dev

version: "3"

silent: true

dotenv: [".env"]

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list-all

  build:
    desc: Build Docker image locally for testing
    vars:
      VERSION: '{{.VERSION | default "local"}}'
    env:
      DOCKER_BUILDKIT: 1
    cmds:
      - >
        docker build
        --tag {{.REGISTRY}}/{{.ORG}}/{{.IMAGE_NAME}}:{{.VERSION}} 
        --build-arg RUST_VERSION={{.RUST_VERSION}} 
        --build-arg CARGO_COMPONENT_VERSION={{.CARGO_COMPONENT_VERSION}} 
        --build-arg WASM_TOOLS_VERSION={{.WASM_TOOLS_VERSION}} 
        --build-arg WKG_VERSION={{.WKG_VERSION}} 
        -f {{.DOCKERFILE}} .

  test:
    desc: Test the built Docker image
    vars:
      VERSION: '{{.VERSION | default "local"}}'
      TEST_DIR: /tmp/wasi-test
    cmds:
      - task: test:setup
        vars:
          TEST_DIR: "{{.TEST_DIR}}"
      - task: test:run
        vars:
          TEST_DIR: "{{.TEST_DIR}}"
          VERSION: "{{.VERSION}}"
      - task: test:verify
        vars:
          TEST_DIR: "{{.TEST_DIR}}"
      - defer: rm -rf "{{.TEST_DIR}}"
      - echo "✅ Test completed successfully!"

  test:setup:
    desc: Setup test environment
    requires:
      vars: [TEST_DIR]
    cmds:
      - rm -rf {{.TEST_DIR}}
      - mkdir -p {{.TEST_DIR}}/output
      - mkdir -p {{.TEST_DIR}}/templates/src
      - mkdir -p {{.TEST_DIR}}/templates/wit
      - |
        cat > {{.TEST_DIR}}/templates/src/lib.rs << 'EOF'
        #[no_mangle]
        pub extern "C" fn greet() -> *const u8 {
            let message = "Hello from WASI component!";
            message.as_ptr()
        }
        EOF
      - |
        cat > {{.TEST_DIR}}/templates/wit/world.wit << 'EOF'
        package test:component;

        world hello {
            export greet: func() -> string;
        }
        EOF
      - |
        cat > {{.TEST_DIR}}/templates/Cargo.toml << 'EOF'
        [package]
        name = "test-component"
        version = "0.1.0"
        edition = "2021"

        [lib]
        crate-type = ["cdylib"]

        [dependencies]

        [package.metadata.component]
        package = "test:component"
        EOF
      - cd {{.TEST_DIR}} && cargo init --name test-component --lib && cp -r templates/* . && cargo generate-lockfile

  test:run:
    desc: Run the Docker container
    requires:
      vars: [TEST_DIR, VERSION]
    cmds:
      - >
        docker run --rm -v {{.TEST_DIR}}:/docker
        -v {{.TEST_DIR}}/output:/docker/output
        -e HOST_UID=$(id -u) -e HOST_GID=$(id -g)
        {{.REGISTRY}}/{{.ORG}}/{{.IMAGE_NAME}}:{{.VERSION}}

  test:verify:
    desc: Verify test results
    requires:
      vars: [TEST_DIR]
    cmds:
      - |
        if [ -f "{{.TEST_DIR}}/output/test_component.wasm" ]; then
          echo "✅ WASM file created successfully"
          ls -lh {{.TEST_DIR}}/output/test_component.wasm
          file {{.TEST_DIR}}/output/test_component.wasm | grep -q "WebAssembly" && echo "✅ WASM file is valid" || (echo "❌ WASM file is not valid" && exit 1)
        else
          echo "❌ Test FAILED: WASM file not found"
          ls -la {{.TEST_DIR}}/output/
          exit 1
        fi
